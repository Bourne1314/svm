{"name":"svm","tagline":"MATLAB SVM toolbox written by Anton Schwaighofer","body":"svm\r\n==\r\n\r\nThis is Anton Schwaighofer's SVM toolbox for MATLAB. It used to be hosted by Anton on line but the page is down so we've added it here. \r\n\r\nSupport Vector Machine toolbox for Matlab\r\nVersion 2.51, January 2002\r\n\r\n\r\nContents.m contains a brief description of all parts of this toolbox.\r\n\r\nMain features are:\r\n\r\n- Except for the QP solver, all parts are written in plain Matlab. This\r\n  guarantees for easy modification. Special kinds of kernels that require\r\n  much computation (such as the Fisher kernel, which is based on a model of\r\n  the data) can easily be incorporated.\r\n\r\n- Extension to multi-class problems via error correcting output codes is\r\n  included.\r\n\r\n- Unless many other SVM toolboxes, this one can handle SVMs with 1norm\r\n  or 2norm of the slack variables.\r\n\r\n- For both cases, a decomposition algorithm is implemented for the training\r\n  routine, together with efficient working set selection strategies.\r\n  The training algorithm uses many of the ideas proposed by Thorsten\r\n  Joachims for his SVMlight. It thus should exhibit a scaling behaviour that\r\n  is comparable to SVMlight.\r\n\r\n\r\n\r\nThis toolbox optionally makes use of a Matlab wrapper for an interior point\r\ncode in LOQO style (Matlab wrapper by Steve Gunn, LOQO code by Alex Smola).\r\nTo compile the wrapper, run\r\n  mex loqo.c pr_loqo.c\r\nMake sure you have turned on the compiler optimizations in mexopts.sh\r\nThe LOQO code can be retrieved from\r\n  http://www.kernel-machines.org/code/prloqo.tar.gz\r\nThe wrapper comes directly from Steve Gunn.\r\n\r\n\r\nCopyright (c) Anton Schwaighofer (2001) \r\nmailto:anton.schwaighofer@gmx.net\r\n\r\nThis program is released unter the GNU General Public License.\r\nSee License.txt for details.\r\n\r\nChanges in version 2.51:\r\n- fixed bug in SVMTRAIN that prevented correct initialisation with\r\n  NET.recompute==Inf\r\n\r\nChanges in version 2.5:\r\n- Handling of multi-class problems with ECOC\r\n- NET.recompute is set to Inf by default, thus all training is done\r\n  incrementally by default.\r\n- Handling the case of all training examples being -1 or +1 correctly\r\n\r\nChanges in version 2.4:\r\n- Better selection of the initial working set\r\n- Added workaround for a (rare) Matlab quadprog bug with badly conditioned\r\n  matrices\r\n- There is now a new kernel function 'rbffull' where a full matrix\r\n  (\"covariance matrix\") C may be put into an RBF kernel:\r\n  K(X1,X2) = exp(-(X1-X2)'*C*(X1-X2))\r\n\r\nChanges in version 2.3:\r\n- slightly more compact debug output\r\n\r\nChanges in version 2.2:\r\n- New default values for parameter qpsize that make the whole toolbox\r\n  *much* faster\r\n- Workaround for a Matlab bug with sparse matrices\r\n- Changed the definition of the RBF-Kernel: from |x-y|^2/(2*nin*param^2)\r\n  to |x-y|^2/(nin*param). This means that all parameter settings for old\r\n  versions need to be updated!\r\n- A few minor things I can't remember\r\n\r\nChanges in version 2.1:\r\nFixed a nasty bug at the KKT check\r\n\r\nChanges in version 2.0:\r\nAll relevant routines have been updated to allow the use of a SVM with\r\n2norm of the slack variables (NET.use2norm==1).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}